-- Q1. Who is the senior most employee based on job title?
SELECT * FROM EMPLOYEE
ORDER BY LEVELS DESC
LIMIT 1;

-- Q2. Which countries have the most Invoices?
SELECT billing_country, COUNT(*) AS Most_Invoices FROM invoice
GROUP BY billing_country
ORDER BY Most_Invoices DESC;

-- Q3. What are top 3 values of total invoice?
SELECT total FROM invoice
ORDER BY total DESC
LIMIT 3;

-- Q4. Which city has the best customers? 
-- A. We would like to throw a promotional Music Festival in the city we made the most money. 
-- B. Write a query that returns one city that has the highest sum of invoice totals. 
-- C. Return both the city name & sum of all invoice totals.
SELECT billing_city, SUM(total) AS Invoice_Totals FROM invoice
GROUP BY billing_city
ORDER BY Invoice_Totals DESC
LIMIT 1;

-- Q5. Who is the best customer? 
-- A. The customer who has spent the most money will be declared the best customer. 
-- B. Write a query that returns the person who has spent the most money.
SELECT customer.customer_id, first_name, last_name, SUM(total) AS total_spending
FROM customer
JOIN invoice ON customer.customer_id = invoice.customer_id
GROUP BY customer.customer_id
ORDER BY total_spending DESC
LIMIT 1;

-- Q6. Write query to return the email, first name, last name, & Genre of all Rock Music listeners. 
-- Return your list ordered alphabetically by email starting with A.
SELECT DISTINCT cus.email, cus.first_name, cus.last_name
FROM customer AS cus
JOIN invoice AS inv ON cus.customer_id = inv.customer_id
JOIN invoice_line AS invl ON inv.invoice_id = invl.invoice_id
WHERE invl.track_id IN(
	SELECT t.track_id
	FROM track AS t
	JOIN genre AS g ON t.genre_id = g.genre_id
	WHERE g.name LIKE 'Rock'
)
ORDER BY cus.email;

-- Q7. Let's invite the artists who have written the most rock music in our dataset. 
-- Write a query that returns the Artist name and total track count of the top 10 rock bands.
SELECT artist.artist_id, artist.name,COUNT(artist.artist_id) AS number_of_songs
FROM track
JOIN album ON album.album_id = track.album_id
JOIN artist ON artist.artist_id = album.artist_id
JOIN genre ON genre.genre_id = track.genre_id
WHERE genre.name LIKE 'Rock'
GROUP BY artist.artist_id
ORDER BY number_of_songs DESC
LIMIT 10;

-- Q8. Return all the track names that have a song length longer than the average song length. 
-- A. Return the Name and Milliseconds for each track. 
-- B. Order by the song length with the longest songs listed first.
SELECT name,milliseconds
FROM track
WHERE milliseconds > (
	SELECT AVG(milliseconds) AS avg_track_length
	FROM track )
ORDER BY milliseconds DESC;
